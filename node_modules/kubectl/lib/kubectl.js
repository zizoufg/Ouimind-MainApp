var spawn = require('child_process').spawn

function Kubectl(type){
	this.type = type
	this.cmd = 'kubectl'
}

Kubectl.prototype.spawn = function(args, done)
{
	var kube = spawn(this.cmd, args)
		, stdout = ''
		, stderr = ''
		
	kube.stdout.on('data', function (data) {
	  	stdout += data
	});
	
	kube.stderr.on('data', function (data) {
	  	stderr += data
	});
	
	kube.on('close', function (code) {
		if( !stderr )
			stderr = undefined
			
		done(stderr, stdout)
	})
}

Kubectl.prototype.list = function(done)
{
	if( !this.type )
		throw new Error('not a function')
	
	this.spawn(['get', this.type ,'--output=json'], function(err, data){
		done(err, !err ? JSON.parse(data) : data)
	})
}

Kubectl.prototype.get = function(id, done)
{
	if( !this.type )
		throw new Error('not a function')
		
	this.spawn(['get', this.type, id, '--output=json'], function(err, data){
		done(err, !err ? JSON.parse(data) : data)
	})
}

Kubectl.prototype.create = function(filepath, done)
{
	if( !this.type )
		throw new Error('not a function')
		
	this.spawn(['create', '-f', filepath], function(err, data){
		done(err, data)
	})
}

Kubectl.prototype.delete = function(id, done)
{
	if( !this.type )
		throw new Error('not a function')
		
	this.spawn(['delete', this.type, id], function(err, data){
		done(err, data)
	})
}

Kubectl.prototype.update = function(filepath, done)
{
	if( !this.type )
		throw new Error('not a function')
	
	this.spawn(['update', '-f', filepath], function(err, data){
		done(err, data)
	})
}

Kubectl.prototype.apply = function(name, json, done)
{
	if( this.type !== 'pods' )
		throw new Error('not a function')
	
	this.spawn(['update',  this.type, name, '--patch='+ JSON.stringify(json)], function(err, data){
		done(err, data)
	})
}

Kubectl.prototype.rollingUpdate = function(name, filepath, done)
{
	if( this.type !== 'rc' )
		throw new Error('not a function')
	
	this.spawn(['rolling-update',  name, '-f', filepath], function(err, data){
		done(err, data)
	})	
}

module.exports = {
	pod: new Kubectl('pods')
	, rc: new Kubectl('rc')
}
